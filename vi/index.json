[
{
	"uri": "/vi/",
	"title": "Hệ thống quản lý ứng dụng web không máy chủ trên nền tảng AWS",
	"tags": [],
	"description": "",
	"content": "Hệ thống quản lý ứng dụng web không máy chủ trên nền tảng AWS Tổng quan Trong kỷ nguyên số hiện nay, việc phát triển và vận hành các ứng dụng web cần đáp ứng nhiều yêu cầu về hiệu năng, chi phí và khả năng mở rộng. Các mô hình truyền thống sử dụng máy chủ vật lý hoặc EC2 thường kéo theo chi phí vận hành cao, độ linh hoạt thấp và yêu cầu kỹ thuật quản trị hệ thống phức tạp. Điều này gây khó khăn cho nhiều doanh nghiệp vừa và nhỏ (SME) trong việc triển khai nhanh các giải pháp phần mềm.\nGiải pháp Serverless trên nền tảng AWS cho phép xây dựng hệ thống mà không cần quản lý máy chủ, chỉ trả tiền cho tài nguyên thực sự sử dụng. Với kiến trúc này, nhà phát triển có thể tập trung hoàn toàn vào nghiệp vụ, còn việc tự động mở rộng, bảo trì và giám sát được AWS xử lý.\nHệ thống bao gồm các thành phần chính:\n Amazon API Gateway: quản lý các endpoint RESTful. AWS Lambda: xử lý logic nghiệp vụ không cần máy chủ. Amazon DynamoDB: lưu trữ dữ liệu phi quan hệ hiệu suất cao. Amazon S3: lưu trữ ảnh gốc và ảnh đã resize. Amazon Cognito: xác thực, phân quyền và quản lý người dùng. S3 + CloudFront: triển khai frontend tĩnh, tải nhanh toàn cầu.  Hệ thống được thiết kế để:\n Tiết kiệm chi phí vận hành đến 60–70% so với mô hình EC2. Tự động scale theo lưu lượng truy cập thực tế. Cung cấp giao diện quản lý sản phẩm linh hoạt, bảo mật. Cho phép thao tác upload ảnh nhanh, resize ảnh tự động.  Kiến trúc hệ thống Serverless trong Worshop Dưới đây là sơ đồ kiến trúc tổng thể minh họa cách các thành phần AWS phối hợp trong hệ thống workshop này:\nNội dung chính  Giới thiệu Xử lý tải ảnh và tối ưu kích thước ảnh Lưu dữ liệu vào DynamoDB Triển khai các hàm Lambda Thiết lập API Gateway Thiết lập cấu hình Cognito UserPool Xác thực và phân quyền Triển khai Frontend Kiểm tra kết quả cuối cùng 10.Dọn dẹp tài nguyên  "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview of the architecture diagram used in this workshop Overview of Serverless Architecture Serverless is a cloud computing model that allows you to run applications without managing servers, operating systems, or infrastructure. Amazon Web Services automatically handles:\n Provisioning compute resources upon request or event Auto-scaling to handle any workload, from a single to thousands of requests Shutting down unused resources to save costs Hardware maintenance and security patching  Benefits of Serverless\n Reduced operational overhead: no server management or auto-scaling configuration Faster deployment: update code and deploy instantly Pay-per-use pricing: billed based on invocations and execution time (ms), with additional storage costs per read/write and GB-month Event-driven architecture: easily integrates with S3, DynamoDB Streams, and API Gateway  Reference: AWS Serverless Overview\n AWS Services Used in This Workshop AWS Lambda  A serverless compute service that runs your code in response to events. Automatically scales based on the number of incoming events; pay only for invocations and execution time (ms). Supports multiple languages (Node.js, Python, C#, Java, Go…) and allows packaging dependencies as a deployment package or container image. Built-in integration with AWS services like S3, DynamoDB, Kinesis, SNS, SQS, API Gateway… Supports versioning and aliases for blue/green or canary deployments.  Documentation: AWS Lambda Developer Guide\nAmazon API Gateway  A fully managed service to create, publish, secure, and monitor RESTful or WebSocket APIs. Supports two API types: REST APIs (feature-rich) and HTTP APIs (lower latency and cost). Offers mapping templates to transform request/response payloads, integration with Lambda, HTTP endpoints, or VPC Link. Built-in support for CORS, throttling, caching, and AWS WAF to protect APIs. Supports authentication using Cognito User Pools, IAM roles, or custom Lambda authorizers.  Documentation: Amazon API Gateway Developer Guide\nAmazon S3  Durable object storage (99.999999999% durability) with virtually unlimited scalability. Multiple storage classes (Standard, Intelligent-Tiering, Infrequent Access, Glacier) to optimize cost. Supports versioning, lifecycle policies (auto-delete or transition), and event notifications. Ensures read-after-write consistency for new PUTs and eventual consistency for overwrite/DELETE. Ideal for storing static files, backups, logs, media files, and big data.  Documentation: Amazon S3 User Guide\nAmazon DynamoDB  A fully managed NoSQL key-value/document database with millisecond latency. Automatically scales throughput (Read/Write Capacity Units) and storage as needed. Supports eventual consistency (default) and strong consistency (optional). Provides DynamoDB Streams, TTL, and Transactions (ACID). Distributed architecture using partition keys for high scalability and stability.  Documentation: Amazon DynamoDB Developer Guide\nS3 Static Website Hosting  Host static websites (HTML, CSS, JavaScript) directly from an S3 bucket. Configure a bucket as a website endpoint (e.g., http://\u0026lt;bucket-name\u0026gt;.s3-website-\u0026lt;region\u0026gt;.amazonaws.com). Supports custom domains via Amazon Route 53 and HTTPS via CloudFront. Suitable for SPA, landing pages, and static documentation.  Documentation: Hosting a Static Website on Amazon S3\nAmazon Cognito  A service for authentication and authorization for web and mobile apps. User Pools: user directory with sign-up/sign-in APIs, MFA, and social identity providers. Identity Pools (Federated Identities): provide temporary AWS credentials to authenticated users via User Pools, social providers, or SAML/OIDC. Supports OAuth 2.0, OpenID Connect, and JWT tokens to secure API Gateway and backend. Integrates with Lambda triggers to customize workflows (e.g., before/after authentication, email/phone verification).  Documentation: Amazon Cognito Developer Guide\nAmazon CloudFront  AWS\u0026rsquo;s Content Delivery Network (CDN) for accelerating delivery of static and dynamic content globally. Automatically caches content at Edge Locations (300+ worldwide), significantly reducing latency. Seamless integration with S3 for secure and fast delivery of static assets (HTML, CSS, JS, images). Supports HTTPS, custom domains, and free SSL certificates via AWS Certificate Manager (ACM). Features include:  Origin failover for source redundancy Signed URLs for access control Geo restriction to limit access by region   Supports SPA (Single Page Application) via custom error pages and rewrite rules.  Documentation: Amazon CloudFront Developer Guide\n"
},
{
	"uri": "/vi/7-authentication-and-authorization/7.1-authenticate-with-cognito-api-gateway/",
	"title": "Thiết lập xác thực Cognito trong API Gateway",
	"tags": [],
	"description": "",
	"content": "Tổng quan Amazon Cognito là dịch vụ quản lý người dùng, giúp xác thực (authentication) và cấp token bảo mật (JWT) cho client truy cập hệ thống. Kết hợp với API Gateway, bạn có thể cấu hình xác thực người dùng bằng token JWT mà không cần viết thêm nhiều mã.\nNội dung chính Kích hoạt xác thực cho các resource  Vào API Gateway Console → chọn API eshop-fcj. Trong menu bên trái, chọn Authorizers. và sau đó chọn create an authorizer  Trong trang Authorizer details chọn và nhập các thông tin sau:    Authorizer details : cognito-authorizer-eshop-fcj\n  Authorizer type : Cognito\n  Cognito user pool : \u0026lt;your-user-pool\u0026gt;\n  Token source : Authorization\n  Sau đó chọn Create authorizer\n  Sau khi tạo Authorizer xong, thì setting cho từng method  Cấu hình cho categories Phương thức GET\n Chọn resources categories với phương thức GET , sau đó chọn Edit  Trong Edit method request chọn và nhập các thông tin sau    Authorization : cognito-authorizer-eshop-fcj\n  Sau đó nhấn save\n  sau khi hoàn thành các method sẽ có kết quả như :  Cấu hình xác thực Cognito cho các phương thức còn lại tương tự\n1. POST /categories\n  Chọn method POST sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  2. GET /categories/{id}\nChọn method GET bên dưới {id}, sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  3. PUT /categories/{id}\nChọn method GET bên dưới {id}, sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  4. DELETE /categories/{id}\nChọn method GET bên dưới {id}, sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  Cấu hình cho products 1. POST /products\n  Chọn method POST sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  2. GET /products\nChọn method GET bên dưới {id}, sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  3. GET /products/{id}\nChọn method GET bên dưới {id}, sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  4. PUT /products/{id}\nChọn method GET bên dưới {id}, sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  5. DELETE /products/{id}\nChọn method GET bên dưới {id}, sau đó chọn Edit method request\n  Trong mục Authorization, chọn: cognito-authorizer-eshop-fcj\n  Save lại và có kết quả như hình dưới:\n  sau khi hoàn thanh kích hoạt xác thực  Trong API Gatewate eshop-fcj. Trong thanh bên trái, chọn Deploy API.  Trong cửa sổ Deploy API , chọn stage để deloy lại , Và sau đó bấm Deploy để hoàn tất  "
},
{
	"uri": "/vi/5-config-api-gateway/5.1-create-api-gateway/",
	"title": "Tạo api gateway",
	"tags": [],
	"description": "",
	"content": "Tạo API Gateway Chúng ta sẽ thiết lập API Gateway để tương tác với các Lambda function đã tạo ở phần trước:\n Mở bảng điều khiển Amazon API Gateway và chọn Create an API  Trong phần Choose an API type, cuộn xuống dưới và chọn REST API, sau đó bấm Build  3. Trong mục API details, nhập các thông tin sau:\n- **Chọn**: `New API`\r- **API name**: `eshop-fcj`\r- **Description (tuỳ chọn)**: `eshop-fcj`\r- **API endpoint type**: `Regional`\r- **IP address type**: `IPv4`\r 4, Sau khi chọn Create API, thì sẽ kết quả như sau:\n "
},
{
	"uri": "/vi/4-deploy-lambda-function/4.1-create-iam-role-for-lambda-function/",
	"title": "Tạo IAM Role cho Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trước khi triển khai bất kỳ hàm Lambda nào, bạn cần tạo một IAM Role – giúp cấp quyền cho hàm Lambda có thể truy cập các dịch vụ AWS khác, chẳng hạn như đọc/ghi dữ liệu từ DynamoDB. Tỏng bài này sẽ cấp quyền ****\nIAM (Identity and Access Management) hoạt động như một lớp phân quyền, cho phép Lambda hoạt động an toàn trong môi trường AWS của bạn.\nCác bước tạo IAM Role cho các hàm Lambda thao tác với DynamoDB  Tiếp theo, Truy cập vào IAM Console. Chọn Roles ở menu bên trái và sau đó Chọn Create role.  Trong phần Trusted entity type chọn AWS service và phần Use case chọn Lambda  Trong phần Permissions policies, tìm và gán quyền AmazonDynamoDBFullAccess và chọn Next   (Bạn cũng có thể tạo policy riêng nếu muốn giới hạn quyền chặt chẽ hơn.)\n Trong phần \u0026ldquo;Name, review, and create\u0026rdquo; đặt tên cho role, ví dụ: lambda-dynamodb-role  Bấm Create role để hoàn tất.  Các bước tạo IAM Role cho các hàm Lambda thao tác với DynamoDB và S3 Khác với các hàm chỉ thao tác với DynamoDB, có một hàm xóa cần thêm quyền xóa ảnh từ S3. Do đó, bạn cần tạo một IAM Role riêng với quyền kết hợp cả DynamoDB và S3.\n Tiếp theo, Truy cập vào IAM Console. Chọn Roles ở menu bên trái và sau đó Chọn Create role.  Trong phần Trusted entity type chọn AWS service và phần Use case chọn Lambda  Trong phần Permissions policies, tìm và gán quyền :   AmazonDynamoDBFullAccess AmazonS3FullAccess   chọn Next   (Bạn cũng có thể tạo policy riêng nếu muốn giới hạn quyền chặt chẽ hơn.)\n Trong phần \u0026ldquo;Name, review, and create\u0026rdquo; đặt tên cho role, ví dụ: lambda-dynamodb-and-s3-role  Bấm Create role để hoàn tất.  Tái sử dụng IAM Role này có thể dùng lại cho nhiều Lambda function khác nhau thao tác với DynamoDB như:\n Tạo hoặc cập nhật dữ liệu Xóa bản ghi Truy vấn chi tiết theo ID hoặc lấy danh sách  Trong môi trường production, nên sử dụng nguyên tắc phân quyền tối thiểu bằng cách tạo IAM policy riêng chỉ cấp quyền cần thiết (ví dụ: PutItem, GetItem, DeleteItem) thay vì dùng FullAccess.\n\r"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/2.1.1-create-s3-bucket/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong bước này, bạn sẽ tạo một S3 Bucket để lưu trữ ảnh gốc được upload từ frontend. Đây là tiền đề để thực hiện quá trình xử lý ảnh trong các bước tiếp theo.\n Các bước tạo S3 Bucket thủ công  Truy cập vào AWS S3 Console và nhấn nút Create bucket.  Tại phần General configuration, nhập các thông tin sau:    AWS Region: Nên chọn một khu vực AWS duy nhất để triển khai toàn bộ kiến trúc (Lambda, S3, DynamoDB,\u0026hellip;) nhằm giảm độ trễ và đơn giản hóa cấu hình phân quyền(ví dụ: Asia Pacific (Singapore) ap-southeast-1)\n  Bucket type: General purpose (mặc định)\n  Bucket name: upload-originals-fcj\n  Lưu ý: Tên bucket phải là duy nhất trên toàn cầu và không chứa khoảng trắng hoặc ký tự đặc biệt.\n\r Ở phần Block Public Access settings, giữ nguyên thiết lập mặc định (tất cả ô đều được chọn) để ngăn truy cập công khai.\n Vì đây là bucket chứa ảnh gốc (original), hệ thống sẽ chỉ truy cập thông qua Presigned URL, không cần public.\n   Cuối cùng, cuộn xuống và nhấn Create bucket để hoàn tất.\n  Sau khi tạo xong, vào bucket vừa tạo chọn tab Permissions  Sau đó cuộn xuống phần Cross-origin resource sharing (CORS) để cấu hình cho phép các domain khác có thể truy cập được, chọn Edit và dán đoạn sau vào  [ { \u0026#34;AllowedHeaders\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;AllowedMethods\u0026#34;: [ \u0026#34;PUT\u0026#34;, \u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34; ], \u0026#34;AllowedOrigins\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;ExposeHeaders\u0026#34;: [ \u0026#34;ETag\u0026#34; ] } ]  Result Once completed, you will see the upload-originals-fcj bucket listed. This bucket will be used by Lambda functions to generate Presigned URLs and process images.\n"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/2.2.1-create-s3-buckets/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong bước này, bạn sẽ tạo một S3 Bucket dùng để lưu trữ ảnh đã được resize bởi Lambda function.\nBucket này sẽ được sử dụng để phân tách ảnh gốc và ảnh đã tối ưu, đảm bảo hiệu suất và bảo mật cho frontend.\n Các bước tạo S3 Bucket thủ công  Truy cập vào AWS S3 Console và nhấn nút Create bucket.  Tại phần General configuration, nhập các thông tin sau:    Bucket name: resize-image-fcj\n  AWS Region: Sử dụng cùng khu vực với các service khác (Lambda, DynamoDB, v.v\u0026hellip;) – ví dụ: Asia Pacific (Singapore) ap-southeast-1\n  Bucket type: General purpose (mặc định)\n  Lưu ý: Tên bucket phải duy nhất trên toàn cầu và không chứa khoảng trắng hoặc ký tự đặc biệt.\n\rỞ phần Block Public Access settings,    Bỏ chọn Block all public access\n  Đánh dấu vào ô I acknowledge that the current settings might result in this bucket and the objects within becoming public.\n   Vì ảnh sau khi resize sẽ được sử dụng trực tiếp trong frontend (trình duyệt), nên cần mở quyền truy cập công khai cho ảnh.\n Cuối cùng, cuộn xuống và nhấn Create bucket để hoàn tất.  Sau khi tạo Bucket xong , thì tạo Policy để ai xũng có thể xem ảnh từ S3 lưu ảnh này\n Truy cập vào S3 vừa tạo, chọn tab Permission, Sau đó chọn Edit trong Bucket Policy   Dán mã dưới đây vào trong ô Policy\n  Xuộn xuống chọn Save Changes để hoàn tất   Kết quả Sau khi hoàn tất, bạn sẽ thấy bucket resize-image-fcj xuất hiện trong danh sách. Bucket này sẽ được sử dụng trong các Lambda function để xử lý và tối ưu ảnh vừa tải lên.\n"
},
{
	"uri": "/vi/6-setup-cognito-userpool/6.1-create-user-pool-and-setting/",
	"title": "Tạo UserPool và cấu hình",
	"tags": [],
	"description": "",
	"content": "Tổng quan Amazon Cognito User Pool là một dịch vụ quản lý danh tính người dùng, cho phép bạn tạo, xác thực và quản lý người dùng cho ứng dụng web hoặc mobile. Trong phần này, sẽ tạo một User Pool cơ bản để sử dụng trong các bước xác thực sau này.\nNội dung chính  Truy cập Amazon Cognito Console. Chọn User pools ở menu bên trái. Sau đó nhấn Create user pool.  Ở màn hình Set up resources for your application, trong phần Define your application, điền các thông tin:    Application type: Single-page application (SPA)\n  Name your application: eshop-client-no-secret\n  Trong workshop này, frontend sẽ gọi trực tiếp đến Cognito để xác thực, vì vậy nên chọn loại Single-page application (SPA) để KHÔNG tạo client secret, giúp đơn giản hóa khi tích hợp từ frontend hoặc Postman.\n\rCuộn xuống phần Configure options, thiết lập như sau:    Sign-in options: Chọn Email để người dùng đăng nhập bằng email.\n  Sau đó nhấn Create user directory để tạo User Pool.\n  Bạn có thể bật thêm xác minh email, phone number nếu cần.\nNgoài ra, tại phần Required attributes for sign-up, bạn có thể thêm các thuộc tính người dùng như name, birthdate, address để thu thập thêm thông tin.\n\rSau khi tạo User Pool xong, quay lại trang Cognito, chọn User Pool bạn vừa tạo và vào App clients trong Applications bạn sẽ tahsya App Client vừa tạo  vào chi tiết App Client vừa tạo và chọn Edit.  Trong phần Authentication flows, bật:    ALLOW_USER_AUTH:Cho phép chọn nhiều loại flow xác thực.\n  ALLOW_USER_PASSWORD_AUTH: Cho phép đăng nhập bằng username/password (bắt buộc nếu bạn gọi API từ Postman hoặc frontend).\n  ALLOW_REFRESH_TOKEN_AUTH:Cho phép lấy refresh_token để gia hạn phiên làm việc.\n  Cuối cùng, cuộn xuống và nhấn Save changes để hoàn tất cấu hình.  Thiết lập xác minh người dùng thông qua email, Trong userpool đã tạo ở menu trái, chọn vào mục Sign-up , Sau đó nhấn nút Edit tại phần Attribute verification and user account confirmation  Trong phần Edit attribute verification and user account confirmation, chọn các mục sau:    Allow Cognito to automatically send messages to verify and confirm - Recommended\n  Send email message, verify email address\n  Keep original attribute value active when an update is pending – Recommended\n  Sau đó chọn Save changes\n  Trong userpool đã tạo ở menu trái, chọn Message templates và ở bảng Message templates, chọn Verification message → nhấn Edit  Trong phần Edit verification message cấu hình như sau:   Verification type: Code Email subject: Mã xác minh đăng ký tài khoản Email message:  \u0026lt;table width=\u0026#34;100%\u0026#34; cellpadding=\u0026#34;0\u0026#34; cellspacing=\u0026#34;0\u0026#34; style=\u0026#34;background-color: #f0f2f5; padding: 40px 0;\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;table width=\u0026#34;100%\u0026#34; style=\u0026#34;max-width:600px; background-color:#ffffff; border-radius:8px; overflow:hidden; font-family:Arial,sans-serif; box-shadow:0 4px 12px rgba(0,0,0,0.1);\u0026#34;\u0026gt; \u0026lt;!-- Logo \u0026amp; Header --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026#34;background: linear-gradient(135deg, #06bbcc 0%, #2E86C1 100%); padding: 30px; text-align:center;\u0026#34;\u0026gt; \u0026lt;h1 style=\u0026#34;margin:0; color:#ffffff; font-size:24px; font-weight:normal;\u0026#34;\u0026gt; Chào mừng đến với \u0026lt;strong\u0026gt;eSHOP-FCJ\u0026lt;/strong\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- Nội dung chính --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026#34;padding: 30px; color: #333333; font-size: 16px; line-height:1.6;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Xin chào \u0026lt;strong\u0026gt;Bạn!\u0026lt;/strong\u0026gt;,\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Để hoàn tất đăng ký tài khoản, vui lòng nhập mã xác minh bên dưới: \u0026lt;/p\u0026gt; \u0026lt;!-- Button-like code box --\u0026gt; \u0026lt;p style=\u0026#34;text-align:center; margin: 30px 0;\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34; display:inline-block; background-color:#06bbcc; color:#ffffff; font-size:28px; font-weight:bold; padding:15px 30px; border-radius:6px; border:2px solid #06bbcc; letter-spacing:4px; \u0026#34;\u0026gt; {{####}} \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;color:#7f8c8d; font-size:14px; text-align:center;\u0026#34;\u0026gt; Mã này sẽ \u0026lt;strong\u0026gt;hết hạn sau 5 phút\u0026lt;/strong\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;margin-top:30px;\u0026#34;\u0026gt; Chúng tôi luôn cam kết bảo vệ thông tin và quyền riêng tư của bạn. \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;margin-top:30px;\u0026#34;\u0026gt; Trân trọng,\u0026lt;br\u0026gt; \u0026lt;em\u0026gt;Đội ngũ eSHOP-FCJ\u0026lt;/em\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- Footer --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026#34;background-color:#f0f2f5; padding:20px 30px; text-align:center; font-size:12px; color:#95a5a6;\u0026#34;\u0026gt; © 2024 eSHOP-FCJ. \u0026lt;a href=\u0026#34;https://your-domain.com\u0026#34; style=\u0026#34;color:#06bbcc; text-decoration:none;\u0026#34;\u0026gt;Visit our site\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;mailto:support@your-domain.com\u0026#34; style=\u0026#34;color:#06bbcc; text-decoration:none;\u0026#34;\u0026gt;support@eshopfcj.com\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;\u0026lt;table width=\u0026#34;100%\u0026#34; cellpadding=\u0026#34;0\u0026#34; cellspacing=\u0026#34;0\u0026#34; style=\u0026#34;background-color: #f0f2f5; padding: 40px 0;\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;table width=\u0026#34;100%\u0026#34; style=\u0026#34;max-width:600px; background-color:#ffffff; border-radius:8px; overflow:hidden; font-family:Arial,sans-serif; box-shadow:0 4px 12px rgba(0,0,0,0.1);\u0026#34;\u0026gt; \u0026lt;!-- Logo \u0026amp; Header --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026#34;background: linear-gradient(135deg, #06bbcc 0%, #2E86C1 100%); padding: 30px; text-align:center;\u0026#34;\u0026gt; \u0026lt;h1 style=\u0026#34;margin:0; color:#ffffff; font-size:24px; font-weight:normal;\u0026#34;\u0026gt; Chào mừng đến với \u0026lt;strong\u0026gt;eSHOP-FCJ\u0026lt;/strong\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- Nội dung chính --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026#34;padding: 30px; color: #333333; font-size: 16px; line-height:1.6;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Xin chào \u0026lt;strong\u0026gt;Bạn!\u0026lt;/strong\u0026gt;,\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Để hoàn tất đăng ký tài khoản, vui lòng nhập mã xác minh bên dưới: \u0026lt;/p\u0026gt; \u0026lt;!-- Button-like code box --\u0026gt; \u0026lt;p style=\u0026#34;text-align:center; margin: 30px 0;\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34; display:inline-block; background-color:#06bbcc; color:#ffffff; font-size:28px; font-weight:bold; padding:15px 30px; border-radius:6px; border:2px solid #06bbcc; letter-spacing:4px; \u0026#34;\u0026gt; {{####}} \u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;color:#7f8c8d; font-size:14px; text-align:center;\u0026#34;\u0026gt; Mã này sẽ \u0026lt;strong\u0026gt;hết hạn sau 5 phút\u0026lt;/strong\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;margin-top:30px;\u0026#34;\u0026gt; Chúng tôi luôn cam kết bảo vệ thông tin và quyền riêng tư của bạn. \u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;margin-top:30px;\u0026#34;\u0026gt; Trân trọng,\u0026lt;br\u0026gt; \u0026lt;em\u0026gt;Đội ngũ eSHOP-FCJ\u0026lt;/em\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- Footer --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026#34;background-color:#f0f2f5; padding:20px 30px; text-align:center; font-size:12px; color:#95a5a6;\u0026#34;\u0026gt; © 2024 eSHOP-FCJ. \u0026lt;a href=\u0026#34;https://your-domain.com\u0026#34; style=\u0026#34;color:#06bbcc; text-decoration:none;\u0026#34;\u0026gt;Visit our site\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;mailto:support@your-domain.com\u0026#34; style=\u0026#34;color:#06bbcc; text-decoration:none;\u0026#34;\u0026gt;support@eshopfcj.com\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; "
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/",
	"title": "Xử lý tải ảnh gốc",
	"tags": [],
	"description": "",
	"content": "Tổng quan Ở bước đầu tiên của chuỗi xử lý ảnh, mục tiêu là tải ảnh gốc (original image) từ frontend lên AWS S3 một cách bảo mật và hiệu quả.\nĐể làm điều đó, bạn sẽ sử dụng một AWS Lambda function để tạo ra một Presigned URL – liên kết tạm thời cho phép client upload ảnh trực tiếp lên S3 mà không cần server trung gian và không lộ thông tin bảo mật.\nGiai đoạn này chưa xử lý resize hay metadata – đây chỉ là bước đầu tiên để đảm bảo ảnh gốc được lưu trữ an toàn trên S3.\n\r Các bước chính  Tạo S3 Buckets Tạo IAM Role Tạo hàm Lambda GetPresignedUrl  "
},
{
	"uri": "/vi/4-deploy-lambda-function/4.2-create-or-update-lambda-function/",
	"title": "Hàm Lambda tạo hoặc cập nhập dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ triển khai hàm các:\n  Hai Lambda có tên create-product, update-product – dùng để tạo hoặc cập nhật dữ liệu sản phẩm vào DynamoDB.\n  Hai Lambda có tên create-category, update-category – dùng để tạo hoặc cập nhật danh mục vào DynamoDB.\n  Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập DynamoDB thông qua một IAM Role đã tạo sẵn.\n Tạo hàm Lambda create-product trên AWS Console  Truy cập AWS Lambda Console, chọn Create function.   Ở màn hình Create function, chọn Author from scratch. và trong phần Basic information, nhập các thông tin:\n Function name: create-product Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role Cuối cùng chọn Create function    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nBạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải file .zip đã build sẵn tại đây: create-product-lambda.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm create-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn create-product-lambda.zip vừa tạo.  Sau khi tải tệp lên xong , thì chọn deloy  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nRESIZED_BUCKET: tên bucket chứa ảnh đã resize\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\nKhi bạn chỉnh sửa code ngay trong giao diện AWS Lambda thì nhớ deloy sau khi sửa xong\n\rCách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: create-product-source.zip\n  Sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  Trong phần tạo hàm Lambda GetPresignedUrl có chỉ rõ từng phần để triển khai build thư viện ở local\n\r Tạo hàm Lambda update-product trên AWS Console  Truy cập AWS Lambda Console, chọn Create function.   Ở màn hình Create function, chọn Author from scratch. và trong phần Basic information, nhập các thông tin:\n Function name: update-product Runtime: Node.js 22.x Architecture: x86_64     Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role Cuối cùng chọn Create function    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nChuẩn bị mã nguồn và thư viện\nBạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải tệp .zip đã build sẵn tại đây: update-product-lambda.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm update-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn update-product-lambda.zip vừa tạo. Và chọn save  Sau khi tải tệp lên xong , thì chọn deloy  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nRESIZED_BUCKET: tên bucket chứa ảnh đã resize\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\nKhi bạn chỉnh sửa code ngay trong giao diện AWS Lambda thì nhớ deloy sau khi sửa xong\n\rCách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: update-product-source.zip\n  Sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  Trong phần tạo hàm Lambda GetPresignedUrl có chỉ rõ từng phần để triển khai build thư viện ở local\n\r Tạo hàm Lambda create-category trên AWS Console Thực hiện tương tự như các bước trên khi tạo các hàm cho product\n  Với các thông tin hàm lambda:\n Function name: create-category Runtime: Node.js 22.x Architecture: x86_64 Use an existing role: lambda-dynamodb-role    Tải tệp .zip đã build sẵn tại đây: create-category-lambda.zip.\n  Tải file zip mới tải lên về lên hàm lambda create-category trong AWS Console\n  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\n Nếu tự build mã nguồn thì tải mã nguồn ở đây : create-category-source.zip\nvà sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  Tạo hàm Lambda update-category trên AWS Console Thực hiện tương tự như các bước trên khi tạo các hàm cho product\n  Với các thông tin hàm lambda:\n Function name: update-category Runtime: Node.js 22.x Architecture: x86_64 Use an existing role: lambda-dynamodb-role    Tải tệp .zip đã build sẵn tại đây: update-category-lambda.zip**.\n  Tải file zip mới tải lên về lên hàm lambda create-category trong AWS Console\n  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\n Nếu tự build mã nguồn thì tải mã nguồn ở đây : update-category-source.zip\nvà sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  "
},
{
	"uri": "/vi/6-setup-cognito-userpool/6.2-test-apis-with-postman/",
	"title": "Kiểm tra API bằng Postman",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi đã tạo User Pool và App Client (loại không có secret), chúng ta có thể kiểm tra các API của Amazon Cognito thông qua Postman như:\n Đăng ký người dùng mới (SignUp) Xác minh mã OTP (ConfirmSignUp) Đăng nhập và nhận token (InitiateAuth)   Nội dung chính Chú ý về việc gọi API đến Amazon Cognito Amazon Cognito sử dụng endpoint chung theo vùng: https://cognito-idp.\u0026lt;region\u0026gt;.amazonaws.com/\n Ví dụ với Singapore: https://cognito-idp.ap-southeast-1.amazonaws.com/\n Tất cả request gửi tới Cognito đều cần phân biệt thông qua ClientId, đây là mã định danh duy nhất cho từng App Client thuộc User Pool của bạn.\nCách lấy ClientID Cấu hình chung khi gọi API Cognito với HEADER bắt buộc\n   Key Value     Content-Type application/x-amz-json-1.1   X-Amz-Target Tên API mà bạn muốn gọi \u0026gt;ví dụ: AWSCognitoIdentityProviderService.InitiateAuth ,AWSCognitoIdentityProviderService.SignUp    Nếu thiếu X-Amz-Target hoặc ghi sai → Cognito sẽ trả về lỗi UnknownOperationException hoặc BadRequest.\n\rĐăng ký người dùng (SignUp)  Trong giao diện postman nhập các thông tin sau:    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức POST và Nhập URL là https://cognito-idp.\u0026lt;YOUR-REGION\u0026gt;.amazonaws.com/\n   Thay \u0026lt;YOUR-REGION\u0026gt; bằng region thật bạn đang dùng, ví dụ: ap-southeast-1\n   Trong phần Header:\n  Content-Type: application/x-amz-json-1.1\n  X-Amz-Target: AWSCognitoIdentityProviderService.SignUp\n    Tiếp theo chuyển sang mục body, sau đó chọn raw và sao chép đoạn dưới đây bỏ vào:  { \u0026#34;ClientId\u0026#34;: \u0026#34;YOUR_APP_CLIENT_ID\u0026#34;, \u0026#34;Username\u0026#34;: \u0026#34;YOUR_USER_NAME\u0026#34;, \u0026#34;Password\u0026#34;: \u0026#34;YOUR_PASS_WORD\u0026#34;, \u0026#34;UserAttributes\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;email\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;YOUR_EMAIL\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;YOUR_FULL_NAME\u0026#34; } ] } Đợi kết quả trả về ở phần body dạng JSON.  Kiểm tra tài khoản đã được thêm vào trong users.   Kiểm tra email mà bạn đã đăng ký. Bạn sẽ nhận được mã xác minh (OTP) từ Cognito để tiếp tục xác thực tài khoản ở bước kế tiếp.  Xác minh người dùng (ConfirmSignUp)  Trong giao diện postman nhập các thông tin sau    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức POST và Nhập URL là https://cognito-idp.\u0026lt;YOUR-REGION\u0026gt;.amazonaws.com/\n   Thay \u0026lt;YOUR-REGION\u0026gt; bằng region thật bạn đang dùng, ví dụ: ap-southeast-1\n   Trong phần Header:\n  Content-Type: application/x-amz-json-1.1\n  X-Amz-Target: AWSCognitoIdentityProviderService.ConfirmSignUp\n    Tiếp theo chuyển sang mục body, sau đó chọn raw và sao chép đoạn dưới đây bỏ vào:  { \u0026#34;ClientId\u0026#34;: \u0026#34;YOUR_APP_CLIENT_ID\u0026#34;, \u0026#34;Username\u0026#34;: \u0026#34;YOUR_USER_NAME\u0026#34;, \u0026#34;ConfirmationCode\u0026#34;: \u0026#34;YOUR_CODE\u0026#34; } Đợi kết quả trả về ở phần body dạng JSON và kết quả trả về kèm theo một SESSION  Kiểm tra tải khoản đã được xác thực hay chưa.  Xác minh người dùng (InitiateAuth)  Trong giao diện postman nhập các thông tin sau    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức POST và Nhập URL là https://cognito-idp.\u0026lt;YOUR-REGION\u0026gt;.amazonaws.com/\n   Thay \u0026lt;YOUR-REGION\u0026gt; bằng region thật bạn đang dùng, ví dụ: ap-southeast-1\n   Trong phần Header:\n  Content-Type: application/x-amz-json-1.1\n  X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth\n    Tiếp theo chuyển sang mục body, sau đó chọn raw và sao chép đoạn dưới đây bỏ vào:  { \u0026#34;ClientId\u0026#34;: \u0026#34;YOUR_APP_CLIENT_ID\u0026#34;, \u0026#34;AuthFlow\u0026#34;: \u0026#34;USER_PASSWORD_AUTH\u0026#34;, \u0026#34;AuthParameters\u0026#34;: { \u0026#34;USERNAME\u0026#34;: \u0026#34;YOUR_USER_NAME\u0026#34;, \u0026#34;PASSWORD\u0026#34;: \u0026#34;YOUR_PASS_WORD\u0026#34; } } Đợi kết quả trả về ở phần body dạng JSON chứa các thông tin như: AccessToken, IdToken, ExpiresIn, RefreshToken, TokenType  "
},
{
	"uri": "/vi/7-authentication-and-authorization/7.2-authorization-with-cognito-groups/",
	"title": "Thiết lập phân quyền Cognito groups",
	"tags": [],
	"description": "",
	"content": "Tổng quan Cognito hỗ trợ cơ chế phân quyền người dùng theo nhóm (groups) thông qua User Pool Groups. Khi một người dùng đăng nhập và thuộc một nhóm nhất định, thông tin nhóm đó sẽ được gắn kèm vào JWT token (trong claim cognito:groups). Từ đó, ta có thể kiểm tra quyền trong backend (Lambda) hoặc tại API Gateway.\nNội dung chính Tạo Cognito User Pool Groups   Truy cập Amazon Cognito Console. Chọn User pools đã tạo. Vào Group và chọn Create group\n  Trong Group information chọn và nhập các thông tin :\n   Group name : admin   Sau đó chọn Create group  Tạo thêm một group user : - Group name : user   Sau đó hoàn thành tạo 2 group admin và user thì sẽ thêm người dùng vào từng nhóm tưng ứng\n  Vào danh sách users, sau đó chọn tài khoản thêm vào group\n  Trong trang chi tiết tài khoản, chọn Add user to group  Sau đó chọn group để thêm tài khoản vào, ví dụ: user  Sau khi hoàn thành sẽ có kết quả sau:  Tạo một user admin cho hệ thống và gán cho group admin  Mở Postman, thực hiện tạo tài khoản người dùng:  Sau khi tạo xong, truy cập vào User vừa tạo trong AWS Cognito:  Trong tab User attributes, nhấn Edit để xác thực email:  Tích chọn Mark email as verified:  Cuối cùng, nhấn Confirm user để kích hoạt tài khoản:  Thêm tài khoản admin vào trong group admin  Cấu hình kiểm tra quyền theo Cognito Group trong các hàm Lambda Trong các hàm lambda đã tọa trước, giờ cần thêm cấu hình trên AWS console để đọc group từ JWT token trong lambda\n\rDưới đây là cấu hình phân quyền từ group thông qua token const claims = event.requestContext.authorizer?.jwt?.claims || event.requestContext.authorizer?.claims || {}; const groups = Array.isArray(claims[\u0026#34;cognito:groups\u0026#34;]) ? claims[\u0026#34;cognito:groups\u0026#34;] : claims[\u0026#34;cognito:groups\u0026#34;] ? [claims[\u0026#34;cognito:groups\u0026#34;]] : []; if (!groups.includes(\u0026#34;admin\u0026#34;)) { return { statusCode: 403, body: JSON.stringify({ error: \u0026#34;Bạn không có quyền\u0026#34; }), }; } Cấu hình phân quyền cho product Cấu hình cho hàm create-product-lambda   Truy cập AWS Lambda Console, chọn hàm lambda sẽ cấu hình, ví dụ: create-product.\n  Ở màn hình phần code của hàm lambda ta thêm phần code ở đầu vào file index.mjs, rồi sau đó chọn deloy\n  Cấu hình cho hàm update-product-lambda   Truy cập AWS Lambda Console, chọn hàm lambda sẽ cấu hình, ví dụ: create-product.\n  Ở màn hình phần code của hàm lambda ta thêm phần code ở đầu vào file index.mjs, rồi sau đó chọn deloy\n  Cấu hình cho hàm delete-product-lambda   Truy cập AWS Lambda Console, chọn hàm lambda sẽ cấu hình, ví dụ: create-product.\n  Ở màn hình phần code của hàm lambda ta thêm phần code ở đầu vào file index.mjs, rồi sau đó chọn deloy\n  Cấu hình phân quyền cho category Cấu hình cho hàm create-category-lambda   Truy cập AWS Lambda Console, chọn hàm lambda sẽ cấu hình, ví dụ: create-category.\n  Ở màn hình phần code của hàm lambda ta thêm phần code ở đầu vào file index.mjs, rồi sau đó chọn deloy\n  Cấu hình cho hàm update-category-lambda   Truy cập AWS Lambda Console, chọn hàm lambda sẽ cấu hình, ví dụ: update-category.\n  Ở màn hình phần code của hàm lambda ta thêm phần code ở đầu vào file index.mjs, rồi sau đó chọn deloy\n  Cấu hình cho hàm delete-category-lambda   Truy cập AWS Lambda Console, chọn hàm lambda sẽ cấu hình, ví dụ: delete-category.\n  Ở màn hình phần code của hàm lambda ta thêm phần code ở đầu vào file index.mjs, rồi sau đó chọn deloy\n  "
},
{
	"uri": "/vi/5-config-api-gateway/5.2-create-resource-and-method/",
	"title": "Tạo các tài nguyên và phương thức tương ứng",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi bạn đã tạo xong API Gateway (eshop-fcj), bước tiếp theo là khai báo tài nguyên (resource) và thiết lập phương thức (method) tương ứng để kết nối đến các hàm Lambda đã triển khai, như: tạo sản phẩm, lấy danh sách, xóa,\u0026hellip;\n Các bước tạo tài nguyên và phương thức Tạo tài nguyên (resource) cho product để triển khai các lambda về product  Mở API Gateway Console, truy cập vào API eshop-fcj vừa mới tạo và sau đó chọn Create Resource,  Trong Resource details:    Resource Path: /\n  Resource Name: products\n  3. Nhấn Create Resource\nTương tự, bạn có thể tạo thêm các tài nguyên khác với\n Đối với category để thao tác với danh mục sản phẩm:   Resource Path /\n  Resource Name categories\n     Đối với upload-image để thao tác với việc tải các tệp ảnh:   Resource Path /\n  Resource Name uploads\n     Thêm phương thức (Method) cho tài nguyên (Resource) Ví dụ thêm phương thức POST cho /product:\n Chọn resource /product trong phần Resource trong API, sau đó chọn Create Method  Trong Method details, nhập các thông tin sau:    Method type : POST\n  Integration type : Lambda function\n  Lambda function : Chọn vùng chứa lamda đã triển khai và chọn lambda tương ứng , ví dụ: create-product\n  Bật chế độ Lambda proxy integration\n  Lưu ý: Trong dự án này, các API nhận dữ liệu dạng JSON body, do đó bắt buộc phải bật Lambda Proxy Integration.\n\rCuộn xuống dưới và hoàn tất chọn Create method  Ví dụ thêm phương thức GET cho /product nhưng có ID truyền vào:\n Trong API eshop-fcj , chọn Create Resource,  Trong Resource details:    Resource Path: /products\n  Resource Name: {id}\n  Cuối cùng, nhấn Create Resource\n  Chọn resource /products trong phần Resource trong API, sau đó chọn Resource con {id}, rồi chọn Create Method  Trong Method details, nhập các thông tin sau:    Method type : GET\n  Integration type : Lambda function\n  Bật chế độ Lambda proxy integration\n  Lambda function : Chọn vùng chứa lamda đã triển kahi avf chọn lmada tương ứng ,ví dụ: get-product\n  Cuộn xuống dưới và hoàn tất chọn Create method  Thực hiện tương tự cho các phương thức và tài nguyên khác tương tự    Resource Path Resource Name Method Mô tả chức năng Lambda tương ứng     / products POST Tạo mới sản phẩm create-product   / products GET Lấy danh sách sản phẩm get-product   /products {id} GET Lấy sản phẩm theo ID get-product   /products {id} DELETE Xoá sản phẩm theo ID delete-product   / categories POST Tạo danh mục sản phẩm create-category   / categories GET Lấy danh sách danh mục create-category   /categories {id} GET Lấy danh mục theo ID create-category   /categories {id} DELETE Xóa danh mục theo ID create-category   / upload-image POST Tạo URL upload ảnh get-presigned-url    Bạn cần thực hiện lại các bước trên để tạo từng tài nguyên với các phương thức tưng ứng còn lại theo bảng trên nếu muốn frontend gọi được API đó!\n\rKết quả cuối cùng sẽ như ảnh dưới đây: "
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/2.1.2-create-iam-role/",
	"title": "Tạo IAM Role cho Lambda GetPresignedUrl",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong phần này, bạn sẽ tạo một IAM Role cho Lambda GetPresignedUrl.\nHàm Lambda này sẽ sinh ra Presigned URL để upload ảnh gốc vào S3 thông qua quyền ghi (PutObject).\nĐể tuân thủ nguyên tắc \u0026ldquo;Least Privilege\u0026rdquo;, ta sẽ tạo một IAM Policy tùy chỉnh chỉ cấp quyền ghi vào bucket vừa tạo để lưu ảnh gốc upload-originals-fcj.\n Các bước tạo IAM Policy CHo IAM Role (Custom)  Truy cập vào IAM Console. Chọn Policies ở menu bên trái. Sau đó chọn Create policy  Trong giao diện Create policy, chuyển sang tab JSON dán đoạn sau vào, và thay \u0026lt;your-bucket-name\u0026gt; bằng tên bucket thực tế của bạn    ví dụ: upload-originals-fcj vừa tạo bucket nãy.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;your-bucket-name\u0026gt;/*\u0026#34; } ] }   Chọn Next , và trong phần Policy details nhập thông tin   Policy name : S3PutOriginalImagePolicy Description - optional :S3PutOriginalImagePolicy   Cuối cùng cuộn xuống và nhấn Create policy để hoàn tất.  Các bước tạo IAM Role  Tiếp theo, Truy cập vào IAM Console. Chọn Roles ở menu bên trái và sau đó Chọn Create role.  Trong phần Trusted entity type chọn AWS service và phần Use case chọn Lambda  Trong phần Permissions policies, tìm và gán quyền S3PutOriginalImagePolicy và chọn Next  Trong phần \u0026ldquo;Name, review, and create\u0026rdquo; đặt tên cho role, ví dụ: lambda-upload-original-role  Bấm Create role để hoàn tất.  Kết quả Sau khi hoàn tất, bạn sẽ thấy một IAM Role mới có tên lambda-upload-original-role xuất hiện trong phần Roles của IAM Console.\nRole này đã được cấu hình để cho phép hàm Lambda get-presigned-url upload ảnh trực tiếp vào bucket upload-originals-fcj với quyền PutObject, tuân thủ nguyên tắc bảo mật ít quyền nhất cần thiết (least privilege).\n"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/2.2.2-create-iam-role/",
	"title": "Tạo IAM Role cho Lambda ResizeImage",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Trong phần này, bạn sẽ tạo một IAM Role dành riêng cho hàm Lambda resize-image.\nHàm này sẽ thực hiện các thao tác sau:\n Đọc ảnh gốc từ S3 bucket upload-originals-fcj Resize ảnh và ghi ảnh kết quả vào S3 bucket resize-image-fcj  Để đảm bảo hệ thống tuân thủ nguyên tắc \u0026ldquo;Least Privilege\u0026rdquo; (ít quyền nhất cần thiết), chúng ta sẽ tạo một IAM Policy tùy chỉnh, chỉ cấp quyền đọc từ bucket ảnh gốc và ghi vào bucket ảnh đã resize.\n Tạo IAM Policy tùy chỉnh cho Lambda Resize Các bước tạo IAM Policy CHo IAM Role (Custom)  Truy cập vào IAM Console. Chọn Policies ở menu bên trái. Sau đó chọn Create policy  Chuyển sang tab JSON, dán đoạn cấu hình sau vào:  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowListAndGetOnSource\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;s3:GetObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::\u0026lt;your-original-bucket-name\u0026gt;\u0026#34;, \u0026#34;arn:aws:s3:::\u0026lt;your-original-bucket-name\u0026gt;/*\u0026#34; ] }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPutOnDestination\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:PutObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;your-resized-bucket-name\u0026gt;/*\u0026#34; } ] } Lưu ý: your-original-bucket-name là bucket dùng để lưu ảnh gốc, còn your-resized-bucket-name là bucket để lưu ảnh đã được resize.\n\rNhấn Next , và trong phần Policy details nhập thông tin   Policy name : ResizeImageLambdaS3Policy Description - optional :ResizeImageLambdaS3Policy   Cuối cùng cuộn xuống và nhấn Create policy để hoàn tất.  Các bước tạo IAM Role  Tiếp theo, Truy cập vào IAM Console. Chọn Policies ở menu bên trái. Sau đó chọn Create policy  Trong phần Permissions policies, tìm và gán quyền S3PutOriginalImagePolicy và chọn Next  Trong phần Permissions policies, tìm và gán quyền ResizeImageLambdaS3Policy và sau đso  Trong phần \u0026ldquo;Name, review, and create\u0026rdquo; đặt tên cho role, ví dụ: lambda-upload-original-role  Bấm Create role để hoàn tất.  Kết quả Sau khi hoàn tất, bạn sẽ thấy một IAM Role mới có tên lambda-resize-image-role xuất hiện trong phần Roles của IAM Console.\nRole này đã được cấu hình để cho phép hàm Lambda resize-image upload ảnh trực tiếp vào bucket resize-image-fcj với quyền PutObject, tuân thủ nguyên tắc bảo mật ít quyền nhất cần thiết (least privilege).\n"
},
{
	"uri": "/vi/2-image-upload-and-resize/",
	"title": "Xử lý tải ảnh và tối ưu kích thước ảnh",
	"tags": [],
	"description": "",
	"content": "Tổng quan Xử lý ảnh là một nhu cầu phổ biến trong các hệ thống hiện đại như mạng xã hội, thương mại điện tử, quản lý hồ sơ người dùng,\u0026hellip;\nTuy nhiên, để ảnh được upload an toàn, và sau đó tự động được xử lý, giảm kích thước, hệ thống cần có:\n Quy trình không qua backend trung gian (giảm tải) Xử lý tự động bằng S3 Event Trigger + AWS Lambda Phân tách ảnh gốc và ảnh đã xử lý  Trong chương này, bạn sẽ thiết lập một quy trình hoàn chỉnh cho việc tải ảnh từ client và xử lý ảnh tự động bằng AWS. Cụ thể:\n Ảnh được tải trực tiếp từ frontend lên S3 bằng Presigned URL Khi ảnh được upload thành công, S3 sẽ kích hoạt Lambda Function Lambda sẽ resize ảnh và lưu vào một bucket khác Ảnh resize sẽ được dùng để hiển thị trong frontend với kích thước và dung lượng tối ưu  Mục tiêu  Tạo cơ chế cho client (web/mobile) upload ảnh trực tiếp bằng Presigned URL Tự động resize ảnh sau khi upload bằng Lambda Function + Sharp Lưu ảnh resize vào bucket đích sẵn sàng dùng trong frontend   Các bước chính  Xử lý tải ảnh gốc Xử lý tối ưu kích thước ảnh  "
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/",
	"title": "Xử lý tối ưu kích thước ảnh",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi ảnh gốc được tải lên thành công vào S3, bước tiếp theo là tự động tối ưu hóa ảnh (resize) để giảm dung lượng và phục vụ frontend hiệu quả hơn.\nThay vì để frontend tự xử lý ảnh (gây chậm, thiếu nhất quán và không bảo mật), ta sẽ để backend đảm nhận công việc này một cách tự động, nhất quán và có kiểm soát, bằng cách sử dụng AWS Lambda kết hợp với S3 Event Trigger.\nTrong phần này, bạn sẽ triển khai một Lambda function với các nhiệm vụ:\n Lắng nghe sự kiện từ S3 (khi có ảnh mới được upload) Tải ảnh gốc, resize ảnh bằng thư viện sharp Lưu ảnh đã resize vào một S3 bucket khác  Cách làm này giúp:\n Đảm bảo frontend luôn hiển thị ảnh với kích thước tối ưu Tăng tốc độ tải trang, cải thiện trải nghiệm người dùng Giảm chi phí lưu trữ và truyền tải dữ liệu (bandwidth)   Nội dung chính  Tạo S3 Buckets Tạo IAM Role Tạo hàm Lambda Resize  "
},
{
	"uri": "/vi/4-deploy-lambda-function/4.3-delete-lambda-function/",
	"title": "Hàm Lambda xoá dữ liệu sản phẩm",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ triển khai hàm các:\n  Lambda có tên delete-product– dùng để xóa dữ liệu sản phẩm vào DynamoDB.\n  Lambda có tên delete-category – dùng để xóa danh mục vào DynamoDB.\n  Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập DynamoDB thông qua một IAM Role đã tạo sẵn.\n Tạo hàm Lambda delete-product trên AWS Console  Truy cập AWS Lambda Console, chọn Create function.   Ở màn hình Create function, chọn Author from scratch. và trong phần Basic information, nhập các thông tin:\n Function name: delete-product Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-and-s3-role Cuối cùng chọn Create function    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nBạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải file .zip đã build sẵn tại đây: delete-product-lambda.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm delete-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn delete-product-lambda.zip vừa tạo. Và chọn save  Sau khi tải tệp lên xong , thì chọn deloy  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nORGINAL_BUCKET: tên bucket chứa ảnh gốc\nRESIZED_BUCKET: tên bucket chứa ảnh đã resize\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\nKhi bạn chỉnh sửa code ngay trong giao diện AWS Lambda thì nhớ deloy sau khi sửa xong\n\rCách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: delete-product-source.zip\n  Sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  Trong phần tạo hàm Lambda GetPresignedUrl có chỉ rõ từng phần để triển khai build thư viện ở local\n\r Tạo hàm Lambda delete-category trên AWS Console  Truy cập AWS Lambda Console, chọn Create function.   Ở màn hình Create function, chọn Author from scratch. và trong phần Basic information, nhập các thông tin:\n Function name: delete-category Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role Cuối cùng chọn Create function    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nBạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải file .zip đã build sẵn tại đây: delete-category-lambda.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm delete-category\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn delete-category-lambda.zip vừa tạo. Và chọn save  Sau khi tải tệp lên xong , thì chọn deloy  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\nKhi bạn chỉnh sửa code ngay trong giao diện AWS Lambda thì nhớ deloy sau khi sửa xong\n\rCách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: delete-category-source.zip\n  Sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  Trong phần tạo hàm Lambda GetPresignedUrl có chỉ rõ từng phần để triển khai build thư viện ở local\n\r "
},
{
	"uri": "/vi/5-config-api-gateway/5.3-enable-cros-and-deloy/",
	"title": "Kích hoạt CORS và triển khai API",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi bạn đã cấu hình các tài nguyên và phương thức cho API Gateway, bước tiếp theo là kích hoạt CORS (Cross-Origin Resource Sharing) để cho phép frontend (hoặc các ứng dụng khác) truy cập API từ domain khác, và sau đó deploy API để sử dụng thực tế.\n Thêm cài đặt hỗ trợ Binary file cho API  Vào API Gateway Console , chọn API vừa tạo, ví dụ: eshop-fcj.  Chọn API Settings ở menu phía bên trái, sau đó chọn Binary media types trong Binary media types  Trong Binary media types nhập thông tin:    Binary media type : multipart/form-data\n  Cuối cùng, nhấn Save changes để hoàn tất\n  Sau khio hoàn tất , sẽ hiện phần multipart/form-data ở Binary media type  Kích hoạt CORS cho từng phương thức Để cho phép trình duyệt gọi các API từ domain khác (ví dụ từ frontend), bạn cần bật CORS cho từng phương thức HTTP (GET, POST, DELETE, v.v).\nThực hiện theo các bước sau cho từng resource với các method tương ứng:\nKích hoạt cho resource của product  Vào API Gateway Console → chọn API eshop-fcj.  Trong sidebar bên trái, chọn một Resource, ví dụ /products. Trong trang Resource details → chọn Enable CORS.  Tại cửa sổ bật lên trong CORS settings    Access-Control-Allow-Methods: chọn các phương thức GET, POST, và OPTIONS\n  Access-Control-Allow-Headers: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\n  Access-Control-Allow-Origin: * (cho phép mọi domain truy cập)\n  Chọn Save để hoàn tất.\n  Tiếp theo là resource con của products là {id} Trong trang Resource details của resource con product là id → chọn Enable CORS.  Tại cửa sổ bật lên trong CORS settings    Access-Control-Allow-Methods: chọn các phương thức DELETE, PUT, DELETE và OPTIONS\n  Access-Control-Allow-Headers: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token\n  Access-Control-Allow-Origin: * (cho phép mọi domain truy cập)\n  Chọn Save để hoàn tất.\n   Thực hiện tương tự kích hoạt cho các tài nguyên với phương thức tương ứng    Resource Path Access-Control-Allow-Origin Access-Control-Allow-Methods     /products * Bật CORS với GET, POST, OPTIONS   /products/{id} * Bật CORS với GET,PUT,DELETE, OPTIONS   /categories * Bật CORS với GET,PUT,DELETE, OPTIONS   /categories/{id} * Bật CORS với GET, POST, OPTIONS   /upload-image * Bật CORS với POST, OPTIONS    Bạn cần thực hiện lại các bước trên cho từng resource còn lại theo bảng trên nếu muốn frontend gọi được API đó!\n\rSau khi hoàn thành hết tất cả sẽ có kết quả như ảnh Sau khi bật CORS cho phương thức (ví dụ GET, POST, \u0026hellip;) tại các endpoint. AWS tự động tạo method OPTIONS tương ứng.Nhờ đó, frontend có thể gửi request từ domain khác mà không bị lỗi CORS.\n\r Triển khai API Gateway Sau khi kích hoạt CORS xong, ta cần deploy lại API để áp dụng thay đổi:\n Vào API Gateway Console , chọn API vừa tạo, ví dụ: eshop-fcj.  Trong thanh bên trái, chọn Deploy API.  Trong cửa sổ Deploy API: Nếu chưa có stage, nhấn [New Stage] để tạo mới.  Nhập các thông tin sau:    Stage name: eshop\n  Deployment description: Dev environment\n  Chọn Deploy để hoàn tất\n  Sau khi triển khai xong sẽ có kết quả như hình ảnh:\nMỗi khi bạn chỉnh sửa method hoặc resource, bắt buộc phải deploy lại API để áp dụng thay đổi và nhớ chọn đúng stage bạn đã tạo\n\r Lấy URL gọi API Sau khi deploy thành công, bạn sẽ thấy Invoke URL, có dạng:\nhttps://{restapi_id}.execute-api.{region}.amazonaws.com/{stage_name}/{resource_path} "
},
{
	"uri": "/vi/3-writing-data-to-amazon-dynamodb/",
	"title": "Lưu dữ liệu vào DynamoDB",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi ảnh đã được tải lên và xử lý thành công, bước tiếp theo là quản lý dữ liệu ứng dụng – chẳng hạn như sản phẩm (Product) và danh mục (Category) – bằng cách lưu trữ chúng vào một hệ thống cơ sở dữ liệu.\nTrong phần này, bạn sẽ sử dụng Amazon DynamoDB – một dịch vụ cơ sở dữ liệu NoSQL được quản lý toàn phần bởi AWS – để lưu trữ và truy vấn dữ liệu hiệu quả, đặc biệt phù hợp cho kiến trúc serverless.\nThông tin sản phẩm và danh mục sẽ bao gồm:\n Product: tên, mô tả, giá, đường dẫn ảnh đã resize, danh mục,\u0026hellip; Category: tên danh mục, ảnh đại diện,\u0026hellip;  Mục tiêu Tạo các bảng DynamoDB cho Product và Category để lưu trữ dữ liệu của ứng dụng.\n Tạo bảng Product trong DynamoDB  Truy cập vào DynamoDB Console và chọn Create Table từ ngăn điều hướng.   Trong trang Table details, nhập thông tin:\n Table name: Product Partition key: Id (kiểu string) Bỏ qua Sort key nếu không cần sắp xếp nâng cao.     Trong Table settings:\n Bạn có thể nhấn Customize settings để tùy chỉnh một số cấu hình nâng cao như Table class và Capacity mode. Table class: Mặc định là Standard – phù hợp cho hầu hết các ứng dụng. Nếu muốn tiết kiệm chi phí hơn cho bảng ít truy cập, có thể chọn Standard-IA. Capacity mode: Mặc định là On-demand – chỉ tính phí theo lượt truy cập thực tế, không cần cấu hình trước. Rất phù hợp với hệ thống mới, MVP, thử nghiệm,\u0026hellip;    Nếu bạn chỉ muốn tạo bảng nhanh chóng, có thể giữ nguyên các thiết lập mặc định. Các thiết lập này đã được tối ưu cho người mới và phù hợp với đa số ứng dụng thực tế.\n\rCuối cùng, kéo xuống và nhấn Create table để hoàn tất.  Tạo bảng Category trong DynamoDB Cách tạo bảng Category cũng hoàn toàn tương tự như Product. Bạn chỉ cần:\n  Truy cập lại DynamoDB Console và chọn Create Table.\n  Trong phần Table details, nhập:\n Table name: Category Partition key: Id (kiểu string) Bỏ qua Sort key     Ở phần Table settings, có thể chọn Default settings nếu không cần thay đổi gì.\n  Nhấn Create table để hoàn tất.\n   Chế độ On-demand rất phù hợp với các hệ thống có lưu lượng truy cập không đều hoặc khó dự đoán, đặc biệt lý tưởng cho người mới bắt đầu hoặc hệ thống đang thử nghiệm.\nPartition key là bắt buộc khi tạo bảng và không thể thay đổi sau này.\nBạn có thể thêm các chỉ mục phụ (Global Secondary Index) sau khi bảng đã được tạo.\n\rKết quả Sau khi tạo xong hai bảng Product và Category, bạn sẽ thấy chúng hiển thị trong danh sách bảng tại DynamoDB Console "
},
{
	"uri": "/vi/2-image-upload-and-resize/2.1-upload-original-image/2.1.3-create-presignedurl-lambda-function/",
	"title": "Tạo hàm Lambda GetPresignedUrl",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, bạn sẽ triển khai hàm Lambda có tên get-presigned-url, với mục tiêu là tạo ra một Presigned URL để frontend có thể upload ảnh trực tiếp lên S3 bucket ảnh gốc.\nHàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập S3 thông qua một IAM Role đã tạo từ bước trước.\nTạo hàm Lambda get-presigned-url trên AWS Console  Truy cập AWS Lambda Console, chọn Functions, sau đó bấm Create function.  Ở màn hình Create function, chọn Author from scratch. Và trong phần Basic information, nhập các thông tin:   Function name: get-presigned-url Runtime: Node.js 22.x Architecture: x86_64  Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\rỞ phần Change default execution role:   Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-upload-original-role Cuối cùng chọn Create function  Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\n Triển khai mã nguồn cho Lambda get-presigned-url Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nBạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải tệp .zip đã build sẵn tại đây: get-presigned-url-lambda.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm get-presigned-url\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn get-presigned-url-lambda.zip vừa tạo.  Sau khi tải tệp lên xong , thì chọn deloy  Cách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: get-presigned-url-source.zip\n  Sau khi giải nén, bạn sẽ thấy các tệp sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Mở Terminal hoặc Command Prompt tại thư mục chứa các tệp này và chạy lệnh:  npm install Nén mã nguồn để upload lên Lambda    Truy cập vào thư mục get-presigned-url-source\n  Chọn tất cả các tệp và thư mục bên trong: index.mjs, package.json, node_modules/\n  Giải nén chúng ra một tệp có tên get-presigned-url-lambda.zip\n  Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm get-presigned-url\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn get-presigned-url-lambda.zip vừa tạo.  Sau khi tải tệp lên xong , thì chọn deloy  **Xác nhận lại handler của lambda: index.handler ** Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r"
},
{
	"uri": "/vi/2-image-upload-and-resize/2.2-resize-image/2.2.3-create-resize-lambda-function/",
	"title": "Tạo hàm Lambda Resize",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, bạn sẽ triển khai hàm Lambda có tên resize-image, với mục tiêu là tự động thay đổi kích thước và tối ưu dung lượng ảnh mỗi khi có ảnh mới được tải lên S3. Việc này giúp frontend truy cập ảnh nhanh hơn, giảm tải băng thông và tối ưu hiệu suất hiển thị. Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập S3 thông qua một IAM Role đã tạo từ bước trước.\nTạo hàm Lambda resize-image trên AWS Console  Truy cập AWS Lambda Console, chọn Create function.  Ở màn hình Create function, chọn Author from scratch.Và trong phần Basic information, nhập các thông tin:   Function name: resize-image Runtime: Node.js 22.x Architecture: x86_64  Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\rỞ phần Change default execution role:   Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-resize-image-role Cuối cùng chọn Create function  Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\n Triển khai mã nguồn cho Lambda resize-image Bạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải file .zip đã build sẵn tại đây: resize-image.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm resize-image\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn resize-image-lambda.zip vừa tạo.  Sau khi tải tệp lên xong , thì chọn deloy  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\rTiếp theo, cuộn xuống dưới xem phần hướng dẫn Cấu hình Trigger từ S3 cho Lambda resize-image  Cách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: resize-image-source.zip\n  Sau khi giải nén, bạn sẽ thấy các file sau:\n index.mjs: chứa logic xử lý của Lambda package.json: khai báo thư viện cần thiết    Lưu ý Trong WS này sử dụng sharp để xử lý ảnh :\n  Là một native module nên sẽ được biên dịch theo hệ điều hành.\n  Lambda sử dụng môi trường Amazon Linux 2, khác hoàn toàn với Windows/macOS.\n  Nếu bạn cài sharp trên máy cá nhân (Windows), khi deploy lên Lambda sẽ gặp lỗi như Error: Cannot find module 'sharp' Để đảm bảo sharp hoạt động đúng, bạn phải sử dụng Docker với image Lambda chính thức của AWS để cài đặt các dependencies.\n\r  Mở PowerShell tại thư mục chứa file Lambda và chạy lệnh sau:  docker run --rm -v \u0026#34;${PWD}:/app\u0026#34; -w /app node:22 bash -c \u0026#34;npm instal sharp\u0026#34; Nếu bạn dùng CMD, thay bằng:\ndocker run --rm -v \u0026#34;%cd%:/var/task\u0026#34; -w /var/task public.ecr.aws/lambda/nodejs20.x bash -c \u0026#34;npm install sharp\u0026#34; Nén mã nguồn để upload lên Lambda    Truy cập vào thư mục resize-image-source\n  Chọn tất cả các tệp và thư mục bên trong: index.mjs, package.json, node_modules/\n  Giải nén chúng ra một tệp có tên resize-image-lambda.zip   Sau khi nén xong tệp xong    Vào AWS Lambda, chọn hàm resize-image\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn resize-image-lambda.zip vừa tạo.  Sau khi tải tệp lên xong , thì chọn deloy  Xác nhận lại handler của lambda: index.handler Handler của Lambda có dạng: \u0026lt;TÊN_FILE\u0026gt;.\u0026lt;TÊN_HÀM\u0026gt;\n\r Cấu hình Trigger từ S3 cho Lambda resize-image Sau khi bạn đã upload source code và thiết lập xong hàm Lambda resize-image, tiếp theo bạn cần cấu hình Trigger từ S3 để mỗi khi một ảnh được upload lên bucket, Lambda sẽ được tự động gọi và thực hiện resize.\n Vào trang chi tiết hàm Lambda resize-image, chuyển sang tab Configuration và sau đó chọn phần Triggers, chọn Add trigger  Trong Trigger configuration, chọn dịch vụ S3 Bucket  Trong Trigger configuration nhập các thông tin sau    Bucket: Tên bucket chứa ảnh gốc , ví dụ : upload-originals\n  Event types : All object create events\n  Prefix (optional): nhập nếu ảnh được upload vào thư mục con, ví dụ: images/originals/\n  Suffix (optional): giới hạn định dạng file ảnh cần xử lý\n  Đánh dấu vào ô I acknowledge that using the same S3 bucket for both input and output is not recommended and that this configuration can cause recursive invocations, increased Lambda usage, and increased costs.\n  Cuối cùng nhấn Add để hoàn tất.\n  Trong workshop này, bạn cần tạo 2 trigger riêng biệt:\n  Trigger 1: Suffix = .jpg\n  Trigger 2: Suffix = .png\n  Tương tự như Trigger 1: Suffix = .jpg, tạo Trigger 2: Suffix = .png :\nVới mỗi S3 trigger trong Lambda chỉ cho phép một Suffix duy nhất. và trong workshop này sẽ tạo hai trigger : .jpg và .png\n\rViệc khai báo rõ Suffix là rất quan trọng, giúp Lambda chỉ xử lý đúng các file ảnh, tránh lỗi và tiết kiệm chi phí vận hành.\nKết quả Sau khi hoàn tất cấu hình trigger, bạn có thể kiểm tra lại tại giao diện S3 Bucket mà bạn đã chọn làm nguồn kích hoạt.\n Truy cập vào S3 Console, chọn bucket chứa ảnh gốc (ví dụ: upload-originals-fcj). Sau đó, chuyển sang tab Properties của bucket.   Kéo xuống phần Event notifications, bạn sẽ thấy danh sách các event trigger đã được cấu hình. Mỗi event tương ứng với một Suffix như .jpg hoặc .png.\n  Tại đây, bạn sẽ thấy các event notification gửi đến Lambda function resize-image.\n  "
},
{
	"uri": "/vi/4-deploy-lambda-function/4.4-get-lambda-function/",
	"title": "Hàm Lambda lấy dữ liệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ triển khai hàm các:\n  Lambda có tên get-product– dùng để lấy dữ liệu sản phẩm vào DynamoDB.\n  Lambda có tên get-category – dùng để lấy danh mục vào DynamoDB.\n  Hàm này được viết bằng Node.js 22.x và sử dụng quyền truy cập DynamoDB thông qua một IAM Role đã tạo sẵn.\nTrong Workshop này, mỗi hàm Lambda get sẽ xử lý cả hai chức năng: lấy toàn bộ danh sách và lấy một mục theo ID. Nghĩa là chỉ cần một Lambda cho cả hai loại truy vấn.\n\r Tạo hàm Lambda get-product trên AWS Console  Truy cập AWS Lambda Console, chọn Create function.   Ở màn hình Create function, chọn Author from scratch. và trong phần Basic information, nhập các thông tin:\n Function name: get-product Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role Cuối cùng chọn Create function    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nBạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải file .zip đã build sẵn tại đây: get-product-lambda.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm get-product\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn get-product-lambda.zip vừa tạo. Và chọn save  Sau khi tải tệp lên xong , thì chọn deloy  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nORGINAL_BUCKET: tên bucket chứa ảnh gốc\nRESIZED_BUCKET: tên bucket chứa ảnh đã resize\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\nKhi bạn chỉnh sửa code ngay trong giao diện AWS Lambda thì nhớ deloy sau khi sửa xong\n\rCách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: get-product-source.zip\n  Sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  Trong phần tạo hàm Lambda GetPresignedUrl có chỉ rõ từng phần để triển khai build thư viện ở local\n\r Tạo hàm Lambda get-category trên AWS Console  Truy cập AWS Lambda Console, chọn Create function.   Ở màn hình Create function, chọn Author from scratch. và trong phần Basic information, nhập các thông tin:\n Function name: get-category Runtime: Node.js 22.x Architecture: x86_64    Hiện tại AWS Lambda hỗ trợ nhiều ngôn ngữ như Java, .NET, Python, Node.js,\u0026hellip;\nTrong hướng dẫn này, ta sử dụng Node.js 22.x – phiên bản mới nhất, hiệu năng cao và hỗ trợ cú pháp hiện đại hơn so với Node.js 18.x.\n\r Ở phần Change default execution role:\n Chọn: Use an existing role Sau đó chọn IAM Role bạn đã tạo, ví dụ: lambda-dynamodb-role Cuối cùng chọn Create function    Sau khi nhấn Create function, Lambda sẽ chuyển sang giao diện chỉnh sửa mã.\nHiện tại Lambda chưa hỗ trợ trực tiếp trình soạn thảo ESM (import/export) cho Node.js 22.x.\nDo đó, bạn cần chuẩn bị mã nguồn và thư viện trên máy local, sau đó nén và upload thủ công.\n\rChuẩn bị mã nguồn và thư viện\nBạn có thể chọn một trong hai cách sau để triển khai Lambda:\nCách 1: Dùng tệp đã build sẵn (nhanh, tiện lợi)  Khuyên dùng nếu bạn muốn triển khai nhanh mà không cần cài đặt gì thêm. tại này WS đã build sẵn\n   Tải file .zip đã build sẵn tại đây: get-category-lambda.zip\n  Sau khi tải tệp đã build xong, thực hiện các bước sau :\n    Vào AWS Lambda, chọn hàm get-category\n  ở phần trang Code, bấm Upload from, sau đó chọn .zip file\n   sau đó chọn get-category-lambda.zip vừa tạo. Và chọn save  Sau khi tải tệp lên xong , thì chọn deloy  Sau khi deploy tệp .zip, bạn cần kiểm tra và cập nhật lại các biến môi trường (Environment Variables) trong phần cấu hình Lambda:\nREGION: vùng AWS mà bạn đã tạo tài nguyên\nTABLE_NAME: tên bảng DynamoDB đã tạo trước đó\nORGINAL_BUCKET: tên bucket chứa ảnh gốc\nRESIZED_BUCKET: tên bucket chứa ảnh đã resize\nHãy chắc chắn rằng các giá trị này khớp với những gì bạn đã cấu hình trong các bước trước , nếu không Lambda sẽ không hoạt động chính xác.\nKhi bạn chỉnh sửa code ngay trong giao diện AWS Lambda thì nhớ deloy sau khi sửa xong\n\rCách 2: Tự chuẩn bị mã nguồn và thư viện  Dành cho bạn nào muốn tự tay build hoặc học thêm.\n   Tải mã nguồn mẫu tại đây: get-category-source.zip\n  Sau đó, bạn có thể xem hướng dẫn build và cài đặt thư viện tại: Tạo hàm Lambda GetPresignedUrl\n  Trong phần tạo hàm Lambda GetPresignedUrl có chỉ rõ từng phần để triển khai build thư viện ở local\n\r "
},
{
	"uri": "/vi/5-config-api-gateway/5.4-test-apis-with-postman/",
	"title": "Kiểm tra các API bằng Postman",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi đã triển khai API Gateway và có Invoke URL, bạn có thể sử dụng Postman để kiểm tra các API như tạo sản phẩm, lấy danh sách, xóa sản phẩm, upload ảnh, v.v.\nSử dụng postman để kiểm tra API Truy cập và sử dụng postman, bạn có thể sử dụng Postman theo một trong hai cách sau:\n  Dùng Postman bản web: Trình duyệt POSTMAN\n  Hoặc tải ứng dụng tại: Ứng dụng POSTMAN\n  Kiểm tra API của category Kiểm tra API để ghi dữ liệu category  Lấy Invoke URL trong Stages của API Gateway vừa tạo và URL thường có dạng :  https://{restapi_id}.execute-api.{region}.amazonaws.com/{stage_name}/{resource_path} Trong giao diện postman nhập các thông tin sau    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức POST và Nhập URL là Invoke URL từ API Gateway đã tạo ở bước trước.\n  Sau đó nhấn send và đợi kết quả trả về ở phần body dạng JSON chứa các thông tin như\n  Tiếp theo chuyển sang mục body, sau đó chọn raw và sao chép đoạn dưới đây bỏ vào:  { \u0026#34;name\u0026#34;: \u0026#34;Điện thoại\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Các dòng điện thoại thông minh từ nhiều thương hiệu.\u0026#34; } Mở bảng Category trong bảng điều khiển của DynamoDB Console để kiểm tra dữ liệu  Ngoài ra , có thể kiểm tra thêm cập nhập dữ liệu :  Chọn phương thức PUT và Nhập URL là Invoke URL từ API Gateway đã tạo ở bước trước và có dạng:\nhttps://{restapi_id}.execute-api.{region}.amazonaws.com/{stage_name}/{resource_path}/{id} Kiểm tra API để lấy ra dữ liệu category   Lấy Invoke URL trong Stages của API Gateway vừa tạo\n  Trong giao diện postman nhập các thông tin sau\n    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức GET , nhập URL là Invoke URL từ API Gateway đã tạo ở bước trước\n  Sau đó nhấn send và dợi kết quả trả về ở phần body dạng JSON chứa các thông tin\n  Ngoài ra có thể lấy dữ liệu category theo Id  Kiểm tra API để xóa ra dữ liệu category   Lấy Invoke URL trong Stages của API Gateway vừa tạo\n  Trong giao diện postman nhập các thông tin sau\n    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức DELETE , nhập URL là Invoke URL từ API Gateway đã tạo ở bước trước\n  Sau đó nhấn send và dợi kết quả trả về ở phần body dạng JSON chứa các thông tin\n  Mở bảng Category trong bảng điều khiển của DynamoDB Console để kiểm tra dữ liệu  Kiểm tra API của tải tệp Kiểm tra API để ghi lấy ra đường dẫn để tải tệp  Lấy Invoke URL trong Stages của API Gateway vừa tạo và URL thường có dạng :  https://{restapi_id}.execute-api.{region}.amazonaws.com/{stage_name}/{resource_path} Trong giao diện postman nhập các thông tin sau    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức POST và Nhập URL là Invoke URL từ API Gateway đã tạo ở bước trước.\n  Sau đó nhấn send và đợi kết quả trả về ở phần body dạng JSON chứa các thông tin như\n  Tiếp theo chuyển sang mục body, sau đó chọn raw và sao chép đoạn dưới đây bỏ vào:  { \u0026#34;fileName\u0026#34;: \u0026#34;example.jpg\u0026#34;, \u0026#34;fileType\u0026#34;: \u0026#34;image/jpeg\u0026#34; } \rVì đang kiểm tra trên postman nên bạn nđiền đúng tên ảnh và thể loại ảnh bạn muốn tải lên\n\rTrong giao diện postman nhập các thông tin sau    chọn Create new requets, dấu + trên màn hình\n  Chọn phương thức PUT và Nhập URL là Invoke URL từ API được tạo wor bước trước\n  Tiếp theo chuyển sang mục body, sau đó chọn binary và sao chép đoạn dưới đây bỏ vào:   Lưu ý: Đảm bảo bạn tải lên đúng tệp hình ảnh mà bạn đã chỉ định trước đó trong fileName và fileType, ví dụ:json\n Nhớ cọn ảnh đúng tên và thể loại cảu tệp ảnh đó nha\n\rSau khi chọn send bạn có xem kết quả từ hai bucket:  "
},
{
	"uri": "/vi/4-deploy-lambda-function/",
	"title": "Triển khai các hàm Lambda",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi đã thiết lập hệ thống lưu trữ dữ liệu bằng DynamoDB, bước tiếp theo là xây dựng các hàm AWS Lambda để xử lý các nghiệp vụ chính của ứng dụng. Mỗi hàm sẽ tương ứng với một hành động thao tác dữ liệu như tạo, cập nhật, xoá, hoặc lấy thông tin từ cơ sở dữ liệu.\nLambda là một dịch vụ điện toán serverless do AWS cung cấp, cho phép bạn chạy mã mà không cần quản lý máy chủ. Bạn chỉ cần tập trung viết logic, còn việc tự động scale, chạy đúng lúc và tính phí theo số lần gọi sẽ do Lambda đảm nhiệm.\nVai trò của các hàm Lambda Trong hệ thống này, ta sẽ triển khai ba loại hàm Lambda cơ bản:\n Hàm tạo/cập nhật dữ liệu: thêm mới hoặc cập nhật thông tin sản phẩm và danh mục vào DynamoDB. Hàm xoá dữ liệu: xoá cứng hoặc xoá mềm bản ghi khỏi cơ sở dữ liệu. Hàm lấy dữ liệu: lấy thông tin chi tiết theo id, hoặc lấy danh sách để hiển thị trong ứng dụng.  Những hàm này có thể được tích hợp vào API Gateway để tạo thành API RESTful hoặc gắn với các sự kiện khác (ví dụ: upload ảnh thành công từ S3, người dùng thao tác,\u0026hellip;).\n Chuẩn bị: Tạo IAM Role cho Lambda Trước khi tạo các hàm Lambda, bạn cần một IAM Role để cấp quyền truy cập DynamoDB. Đây là bước bắt buộc để Lambda có thể thao tác dữ liệu. Thực hiện như sau:\n Truy cập vào IAM Console → mục Roles → nhấn Create role. Ở phần Trusted entity type, chọn: AWS service. Ở mục Use case, chọn: Lambda. Bấm Next và gán quyền:  Tìm và chọn policy: AmazonDynamoDBFullAccess (hoặc custom policy nếu muốn giới hạn quyền).   Đặt tên Role, ví dụ: lambda-dynamodb-role. Bấm Create role.   Các bước chính  Tạo IAM Role cho Lambda Function Hàm Lambda tạo hoặc cập nhập dữ liệu Hàm Lambda xóa dữ liệu Hàm Lambda lấy dữ liệu  "
},
{
	"uri": "/vi/5-config-api-gateway/",
	"title": "Thiết lập API Gateway",
	"tags": [],
	"description": "",
	"content": "Tổng quan Để các Lambda function có thể được gọi từ frontend (hoặc Postman, curl\u0026hellip;), chúng ta cần thiết lập một lớp API trung gian — đó chính là Amazon API Gateway.\nAPI Gateway đóng vai trò như \u0026ldquo;cửa ngõ\u0026rdquo; giúp client (người dùng) tương tác với backend Lambda một cách bảo mật, rõ ràng và có tổ chức.\nTrong phần này, chúng ta sẽ:\n Tạo REST API mới có tên eshop-fcj Gắn từng resource (ví dụ: /products, /products/{id}) vào Lambda tương ứng Thiết lập các method như GET, POST, PUT, DELETE Kích hoạt CORS để frontend có thể gọi được từ trình duyệt Kiểm thử API với Postman  Khi hoàn tất, bạn sẽ có một hệ thống API hoàn chỉnh có thể dùng để triển khai một frontend gọi đến chúng.\n Các bước chính  Tạo API Gateway Tạo tài nguyên và phương thức Kích hoạt CORS Kiểm tra các API bằng Postman  "
},
{
	"uri": "/vi/6-setup-cognito-userpool/",
	"title": "Thiết lập cấu hình Cognito UserPool",
	"tags": [],
	"description": "",
	"content": "Tổng quan Amazon Cognito cho phép bạn dễ dàng thêm tính năng đăng ký, đăng nhập và quản lý người dùng vào ứng dụng của mình. Trong phần này, bạn sẽ:\n  Tạo một User Pool để quản lý người dùng.\n  Cấu hình các thuộc tính cần thiết như email, username, số điện thoại.\n  Kiểm tra chức năng thông qua Postman với các API đăng ký (sign up) và đăng nhập (sign in).\n  Nội dung chính  Tạo user pool Kiểm tra API với postman   "
},
{
	"uri": "/vi/7-authentication-and-authorization/",
	"title": "Xác thực và phân quyền",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong hệ thống Serverless trên AWS, bảo mật là yếu tố then chốt. Việc xác thực (authentication) đảm bảo chỉ người dùng hợp lệ mới có quyền truy cập, trong khi phân quyền (authorization) quyết định mức độ truy cập của từng nhóm người dùng.\nGiải pháp sử dụng:\n  Amazon Cognito để quản lý người dùng, xác thực đăng nhập\n  Cognito User Pools Group để phân nhóm quyền\n  API Gateway làm lớp bảo vệ trung gian\n  Lambda Authorizer hoặc Cognito Authorizer để kiểm tra token truy cập\n  Nội dung chính  Xác thực người dùng truy cập Phân quyền người dùng  "
},
{
	"uri": "/vi/8-deploy-frontend/",
	"title": "Triển khai Frontend",
	"tags": [],
	"description": "",
	"content": "Tổng quan Tiếp theo, triển khai frontend (giao diện người dùng) của ứng dụng web hiện đại lên AWS S3 và CloudFront, đảm bảo người dùng cuối có thể truy cập thông qua Internet với tốc độ nhanh, bảo mật và ổn định.\nỨng dụng frontend ở đây thường là Single Page Application (SPA) được xây dựng bằng React, Angular hoặc Vue. Sau khi build hoàn tất, mã nguồn tĩnh sẽ được upload lên S3 và sử dụng CloudFront làm CDN để phân phối nội dung hiệu quả toàn cầu.\nNội dung chính Tạo bucket để tải file web lên  Truy cập vào AWS S3 Console và nhấn nút Create bucket.  Tại phần General configuration, nhập các thông tin sau:    AWS Region: Nên chọn một khu vực AWS duy nhất để triển khai toàn bộ kiến trúc (Lambda, S3, DynamoDB,\u0026hellip;) nhằm giảm độ trễ và đơn giản hóa cấu hình phân quyền(ví dụ: Asia Pacific (Singapore) ap-southeast-1)\n  Bucket type: General purpose (mặc định)\n  Bucket name: fe-easyshop-fcj\n  Lưu ý: Tên bucket phải là duy nhất trên toàn cầu và không chứa khoảng trắng hoặc ký tự đặc biệt.\n\rỞ phần Block Public Access settings,    Bỏ chọn Block all public access\n  Đánh dấu vào ô I acknowledge that the current settings might result in this bucket and the objects within becoming public.\n  Cuối cùng, cuộn xuống và nhấn Create bucket để hoàn tất.  Tải các tệp lên S3 Tải các tệp lên S3  Truy cập vào bucket bạn đã tạo (ví dụ: fe-easyshop-fcj) trong AWS S3 Console.  Trong trang chi tiết của s3, chọn Upload  Trong phần upload mình sẽ thêm hai file và một thư mục sau khi ta buid ở bước trên   File index.html và các file gốc (ví dụ: vite.svg, favicon.ico) từ thư mục dist.   Toàn bộ thư mục assets/ hoặc các thư mục con chứa mã tĩnh (CSS, JS, images).   Không upload cả thư mục dist, mà chỉ upload nội dung bên trong nó (giữ đúng cấu trúc gốc). Và đảm bảo file index.html nằm ở gốc bucket, không nằm trong thư mục con.\n\rNhấn Upload để hoàn tất. và kết quả sẽ có như hình sau :  cấu hình Bucket Policy Sau khi upload xong, cần cấu hình Bucket Policy để cho phép truy cập công khai từ trình duyệt (từ mọi domain).\n trong phần thong tin s3, Chọn tab Permissions  Cuộn xuống phần Bucket policy, nhấn Edit  Dán đoạn JSON sau vào khung editor:  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::\u0026lt;your-bucket-name\u0026gt;/*\u0026#34; } ] } Cấu hình Static Website Hosting Sau khi tải tệp và cấu hình policy , bạn cần bật chế độ Static website hosting cho bucket.\n  Trong trang chi tiết của bucket, chọn tab Properties.\n  Cuộn xuống phần Static website hosting, bấm vào Edit.\n  Trong Edit static website hosting và nhập các thông tin sau:\n    Index document: index.html\n  Error document: index.html (nếu dùng SPA – Single Page Application)\n  Bấm Save changes để lưu.\n  Khi dùng Single Page Application (SPA), cần đặt cả Index document và Error document là index.html. Vì SPA chỉ có một file duy nhất, nên nếu truy cập trực tiếp vào các đường dẫn như /products hoặc /cart, trình duyệt sẽ cần tải lại index.html để JavaScript xử lý routing. Nếu không cấu hình đúng, truy cập thẳng các URL này sẽ bị lỗi 404 trên S3.\n\rThiết lập CloudFront CDN cho S3 Website  Truy cập AWS CloudFront Console Và chọn Create Distribution  Trong phần Distribution option:    Distribution name : easyshop-cdn\n  Chọn Single website or app\n  Sau đó chọn next\n  Trong phần Specify origin:    Origin type : Amazon S3\n  S3 origin : Chọn S3 triển khai Frontend. Ví dụ, fe-easyshop-fcj.s3.ap-southeast-1.amazonaws.com\n  Sau đó cuộn xuống và chọn next\n  Trong phần Enable security:   Web Application Firewall (WAF) tắt chế độ này chọn Do not enable security protectionsvà sau đó chokjn Next Để không tốn thêm phí an toàn  Cuối xùng chọn create distribution  Nãy ở bước chọn S3 origin chỉ mới là sử dụng REST API endpoint, dùng cho các ứng dụng backend hoặc object API (dùng SDK truy cập), KHÔNG dùng để render website tĩnh. Nhưng website tĩnh (SPA) lại cần sử dụng dạng website endpoint.\n\rCập nhật Origin để tránh lỗi AccessDenied khi truy cập CloudFront Sau khi tạo xong Distribution, bạn cần chỉnh lại Origin để sử dụng S3 website endpoint thay vì REST API endpoint mặc định.   Vào trang chi tiết của Distribution vừa tạo, sau đó chọn tab Origins  -Chọn dòng Origin tương ứng với bucket bạn đã chọn (ví dụ: fe-easyshop-fcj.s3.ap-southeast-1.amazonaws.com) sau đó chọn Edit\n Trong trang chỉnh sửa origin, bạn sẽ thấy cảnh báo:   This S3 bucket has static web hosting enabled. If you plan to use this distribution as a website, we recommend using the S3 website endpoint rather than the bucket endpoint.\n  Chọn nút Use website endpoint   Sau đó Cuộn xuống và chọn Save changes  Sau khi tạo hoặc chỉnh sửa Distribution, bạn sẽ thấy trạng thái là: “Deploying” . Bạn cần chờ khoảng 3–5 phút để hệ thống cập nhật các thay đổi.\n\rKết quả Sau khi hoàn tất các bước trên, bạn sẽ nhận được một đường dẫn CloudFront có dạng như sau:\n"
},
{
	"uri": "/vi/9-final-result-verification/",
	"title": "Kiểm tra kết quả cuối cùng trên giao diện ",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi đã triển khai thành công frontend lên S3 và cấu hình CloudFront, bạn hãy kiểm tra lại toàn bộ hệ thống bằng cách truy cập vào website test thử nha.\nTruy cập website frontend Đăng nhập / Đăng ký  Truy cập trang /login và /register để kiểm tra luồng xác thực người dùng. Đảm bảo kết nối với Cognito hoạt động bình thường.  Trang đăng kí Trang đăng nhập Trang Admin  Đăng nhập bằng tài khoản admin Truy cập các trang như /admin/products, /admin/categories Kiểm tra xem có thể thêm, sửa, xoá sản phẩm không.  Trang admin quản lý sản phẩm\nTrang admin quản danh mục\nTrang người dùng  Truy cập các trang ``, xem có hiện danh sách sản phẩm không  Trang báo lỗi (không có quyền)  Đăng nhập bằng tài khoản user thông thường Truy cập vào trang /admin để xác minh rằng hệ thống hiển thị thông báo “Không có quyền truy cập”.  "
},
{
	"uri": "/vi/10-clean-up-resources/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sau khi hoàn tất triển khai và kiểm thử hệ thống serverless, bạn nên dọn dẹp toàn bộ tài nguyên AWS để tránh phát sinh chi phí không cần thiết.\nTrong workshop này, chúng ta đã tạo ra nhiều tài nguyên như:\n IAM Role (cho Lambda, API Gateway…) Lambda Functions DynamoDB Tables S3 Buckets (gốc và ảnh resize) Amazon API Gateway Amazon Cognito (User Pool, App Client…) Amazon CloudFront (nếu dùng với frontend hosting)   Nội dung chính Lưu ý: Tên các tài nguyên (IAM role, bucket, API\u0026hellip;) có thể khác nhau giữa mỗi người. Bạn nên kiểm tra kỹ lại tên trước khi xoá để tránh ảnh hưởng các dịch vụ khác không nằm trong workshop này.\n\r1. Xoá bảng DynamoDB  Truy cập DynamoDB Console → Chọn:   Bảng Product Bảng Category  Sau đó, chọn Delete Table  2. Xoá Lambda Functions  Truy cập Lambda Console → Xoá các hàm:   create-product create-category get-presigned-url resize-image delete-product \u0026hellip;  Sau đó, chọn từng function , nhấn Actions \u0026gt; Delete  3. Xoá S3 Buckets  Truy cập S3 Console   Bucket gốc: upload-originals-fcj Bucket resize: resized-image-fcj Bucket hosting frontend (nếu có)   Trước khi xoá bucket, cần xoá toàn bộ objects bên trong\n Sau đó, chọn Delete bucket  4. Xoá Amazon API Gateway Truy cập API Gateway Console\n  Chọn API như easyshop-api hoặc tên bạn đã đặt\n  Sau đó, chọn Delete\n  5. Xoá Amazon Cognito Truy cập Cognito Console\n Xoá User pool Xoá App client Xoá Identity pool (nếu có)  6. Xoá Amazon CloudFront (nếu có) Truy cập CloudFront Console\n1.Chọn distribution dùng để phân phối frontend\nBấm Disable trước, sau đó mới Delete  7. Xoá IAM Role và Policy  Truy cập IAM Console, Tìm và xoá các role như:   lambda-dynamodb-role lambda-resize-image-role lambda-upload-original-role  Chọn từng role , sau đó chọn Delete role  Kết luận Dọn dẹp tài nguyên là bước cuối cùng giúp bạn:\n Tránh phát sinh chi phí không mong muốn Giữ tài khoản AWS gọn gàng, sạch sẽ Đảm bảo tuân thủ chính sách bảo mật (xoá quyền, xoá role không còn dùng)  "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]